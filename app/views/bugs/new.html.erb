<h1 class="mb-4">Create New Task (Bug or Feature)</h1>

<% if @bug.errors.any? %>
  <div class="alert alert-danger">
    <ul>
      <% @bug.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
    </ul>
  </div>
<% end %>

<%= form_with model: [@project, @bug], html: { class: 'needs-validation', id: 'task-form' } do |form| %>
  
  <div class="mb-3">
    <%= form.label :title, class: 'form-label' %>
    <%= form.text_field :title, required: true, class: 'form-control' %>
  </div>

  <div class="mb-3">
    <%= form.label :description, class: 'form-label' %>
    <%= form.text_area :description, class: 'form-control', rows: 3 %>
  </div>

  <div class="mb-3">
    <%= form.label :bug_type, 'Type (Bug or Feature)', class: 'form-label' %>
    <%= form.select :bug_type, Bug.bug_types.keys.map { |k| [k.humanize, k] }, { selected: 'feature' }, class: 'form-select', id: 'bug-type' %>
  </div>

  <div class="mb-3">
    <%= form.label :status, class: 'form-label' %>
    <%= form.select :status, [], { selected: 'latest' }, class: 'form-select', id: 'status' %>
  </div>

  <div class="mb-3">
    <%= form.label :deadline, class: 'form-label' %>
    <%= form.date_field :deadline, class: 'form-control', required: true %>  
  </div>

  <div class="mb-3">
    <%= form.label :screenshot, 'Upload Screenshot (PNG or GIF only)', class: 'form-label' %>
    <%= form.file_field :screenshot, class: 'form-control' %> 
  </div>

  <div class="mb-3">
    <%= form.label :developer_id, 'Assign Developer', class: 'form-label' %>
    <%= form.collection_select :developer_id, @developers, :id, :name, { prompt: 'Select a Developer' }, class: 'form-select', required: true %>
  </div>

  <div>
    <%= form.submit 'Create Task', class: 'btn btn-primary' %>
  </div>
<% end %>

<%= link_to "Back", :back, class: 'mt-3' %>

<script>
  document.addEventListener('turbo:load' , function() {
    const bugTypeSelect = document.getElementById('bug-type');
    const statusSelect = document.getElementById('status');

    const statuses = {
      bug: ['latest', 'started', 'resolved'],
      feature: ['latest', 'started', 'completed']
    };

    function updateStatusOptions() {
      const selectedType = bugTypeSelect.value;
      statusSelect.innerHTML = '';
      if (selectedType in statuses) {
        statuses[selectedType].forEach(status => {
          const option = document.createElement('option');
          option.value = status;
          option.textContent = status.charAt(0).toUpperCase() + status.slice(1);
          statusSelect.appendChild(option);
        });
      }
    }

   
    if (bugTypeSelect) {
      bugTypeSelect.addEventListener('change', updateStatusOptions);
      updateStatusOptions(); 
      if (bugTypeSelect.value === 'feature') {
        updateStatusOptions(); 
      }
    }
  });
</script>


